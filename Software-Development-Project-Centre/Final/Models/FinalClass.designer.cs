#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Final.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.ComponentModel.DataAnnotations;
   

	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ASPNETDB")]
	public partial class FinalClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSoftwareRequirement(SoftwareRequirement instance);
    partial void UpdateSoftwareRequirement(SoftwareRequirement instance);
    partial void DeleteSoftwareRequirement(SoftwareRequirement instance);
    partial void InsertWorkPacRef(WorkPacRef instance);
    partial void UpdateWorkPacRef(WorkPacRef instance);
    partial void DeleteWorkPacRef(WorkPacRef instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertStatusReport(StatusReport instance);
    partial void UpdateStatusReport(StatusReport instance);
    partial void DeleteStatusReport(StatusReport instance);
    #endregion
		
		public FinalClassDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASPNETDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FinalClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SoftwareRequirement> SoftwareRequirements
		{
			get
			{
				return this.GetTable<SoftwareRequirement>();
			}
		}
		
		public System.Data.Linq.Table<WorkPacRef> WorkPacRefs
		{
			get
			{
				return this.GetTable<WorkPacRef>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<StatusReport> StatusReports
		{
			get
			{
				return this.GetTable<StatusReport>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SoftwareRequirement")]
	public partial class SoftwareRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoftReqId;
		
		private string _SoftReqTitle;
		
		private System.DateTime _SoftReqDate;
		
		private string _SoftReqSt;
		
		private string _Issue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoftReqIdChanging(int value);
    partial void OnSoftReqIdChanged();
    partial void OnSoftReqTitleChanging(string value);
    partial void OnSoftReqTitleChanged();
    partial void OnSoftReqDateChanging(System.DateTime value);
    partial void OnSoftReqDateChanged();
    partial void OnSoftReqStChanging(string value);
    partial void OnSoftReqStChanged();
    partial void OnIssueChanging(string value);
    partial void OnIssueChanged();
    #endregion
		
		public SoftwareRequirement()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftReqId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SoftReqId
		{
			get
			{
				return this._SoftReqId;
			}
			set
			{
				if ((this._SoftReqId != value))
				{
					this.OnSoftReqIdChanging(value);
					this.SendPropertyChanging();
					this._SoftReqId = value;
					this.SendPropertyChanged("SoftReqId");
					this.OnSoftReqIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftReqTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string SoftReqTitle
		{
			get
			{
				return this._SoftReqTitle;
			}
			set
			{
				if ((this._SoftReqTitle != value))
				{
					this.OnSoftReqTitleChanging(value);
					this.SendPropertyChanging();
					this._SoftReqTitle = value;
					this.SendPropertyChanged("SoftReqTitle");
					this.OnSoftReqTitleChanged();
				}
			}
		}

       
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftReqDate", DbType="Date NOT NULL")]
		public System.DateTime SoftReqDate
		{
			get
			{
				return this._SoftReqDate.Date.Date;
			}
			set
			{
				if ((this._SoftReqDate != value))
				{
					this.OnSoftReqDateChanging(value);
					this.SendPropertyChanging();
					this._SoftReqDate = value;
					this.SendPropertyChanged("SoftReqDate");
					this.OnSoftReqDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftReqSt", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SoftReqSt
		{
			get
			{
				return this._SoftReqSt;
			}
			set
			{
				if ((this._SoftReqSt != value))
				{
					this.OnSoftReqStChanging(value);
					this.SendPropertyChanging();
					this._SoftReqSt = value;
					this.SendPropertyChanged("SoftReqSt");
					this.OnSoftReqStChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="NVarChar(MAX)")]
		public string Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkPacRef")]
	public partial class WorkPacRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkPacRefId;
		
		private string _WorkPacRefTitle;
		
		private System.DateTime _WorkPacRefDate;
		
		private string _WorkPacRefDesc;
		
		private System.Guid _UserId;
		
		private EntitySet<StatusReport> _StatusReports;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkPacRefIdChanging(int value);
    partial void OnWorkPacRefIdChanged();
    partial void OnWorkPacRefTitleChanging(string value);
    partial void OnWorkPacRefTitleChanged();
    partial void OnWorkPacRefDateChanging(System.DateTime value);
    partial void OnWorkPacRefDateChanged();
    partial void OnWorkPacRefDescChanging(string value);
    partial void OnWorkPacRefDescChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public WorkPacRef()
		{
			this._StatusReports = new EntitySet<StatusReport>(new Action<StatusReport>(this.attach_StatusReports), new Action<StatusReport>(this.detach_StatusReports));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPacRefId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkPacRefId
		{
			get
			{
				return this._WorkPacRefId;
			}
			set
			{
				if ((this._WorkPacRefId != value))
				{
					this.OnWorkPacRefIdChanging(value);
					this.SendPropertyChanging();
					this._WorkPacRefId = value;
					this.SendPropertyChanged("WorkPacRefId");
					this.OnWorkPacRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPacRefTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string WorkPacRefTitle
		{
			get
			{
				return this._WorkPacRefTitle;
			}
			set
			{
				if ((this._WorkPacRefTitle != value))
				{
					this.OnWorkPacRefTitleChanging(value);
					this.SendPropertyChanging();
					this._WorkPacRefTitle = value;
					this.SendPropertyChanged("WorkPacRefTitle");
					this.OnWorkPacRefTitleChanged();
				}
			}
		}

        
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPacRefDate", DbType="Date NOT NULL")]
		public System.DateTime WorkPacRefDate
		{
			get
			{
				return this._WorkPacRefDate.Date.Date;
			}
			set
			{
				if ((this._WorkPacRefDate != value))
				{
					this.OnWorkPacRefDateChanging(value);
					this.SendPropertyChanging();
					this._WorkPacRefDate = value;
					this.SendPropertyChanged("WorkPacRefDate");
					this.OnWorkPacRefDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPacRefDesc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string WorkPacRefDesc
		{
			get
			{
				return this._WorkPacRefDesc;
			}
			set
			{
				if ((this._WorkPacRefDesc != value))
				{
					this.OnWorkPacRefDescChanging(value);
					this.SendPropertyChanging();
					this._WorkPacRefDesc = value;
					this.SendPropertyChanged("WorkPacRefDesc");
					this.OnWorkPacRefDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPacRef_StatusReport", Storage="_StatusReports", ThisKey="WorkPacRefId", OtherKey="WorkPacRefId")]
		public EntitySet<StatusReport> StatusReports
		{
			get
			{
				return this._StatusReports;
			}
			set
			{
				this._StatusReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_WorkPacRef", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.WorkPacRefs.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.WorkPacRefs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StatusReports(StatusReport entity)
		{
			this.SendPropertyChanging();
			entity.WorkPacRef = this;
		}
		
		private void detach_StatusReports(StatusReport entity)
		{
			this.SendPropertyChanging();
			entity.WorkPacRef = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<WorkPacRef> _WorkPacRefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._WorkPacRefs = new EntitySet<WorkPacRef>(new Action<WorkPacRef>(this.attach_WorkPacRefs), new Action<WorkPacRef>(this.detach_WorkPacRefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_WorkPacRef", Storage="_WorkPacRefs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<WorkPacRef> WorkPacRefs
		{
			get
			{
				return this._WorkPacRefs;
			}
			set
			{
				this._WorkPacRefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkPacRefs(WorkPacRef entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_WorkPacRefs(WorkPacRef entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusReport")]
	public partial class StatusReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusId;
		
		private string _StatusTitle;
		
		private System.DateTime _StatusDate;
		
		private string _StatusText;
		
		private int _WorkPacRefId;
		
		private EntityRef<WorkPacRef> _WorkPacRef;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnStatusTitleChanging(string value);
    partial void OnStatusTitleChanged();
    partial void OnStatusDateChanging(System.DateTime value);
    partial void OnStatusDateChanged();
    partial void OnStatusTextChanging(string value);
    partial void OnStatusTextChanged();
    partial void OnWorkPacRefIdChanging(int value);
    partial void OnWorkPacRefIdChanged();
    #endregion
		
		public StatusReport()
		{
			this._WorkPacRef = default(EntityRef<WorkPacRef>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string StatusTitle
		{
			get
			{
				return this._StatusTitle;
			}
			set
			{
				if ((this._StatusTitle != value))
				{
					this.OnStatusTitleChanging(value);
					this.SendPropertyChanging();
					this._StatusTitle = value;
					this.SendPropertyChanged("StatusTitle");
					this.OnStatusTitleChanged();
				}
			}
		}


        
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusDate", DbType="Date NOT NULL")]
		public System.DateTime StatusDate
		{
			get
			{
				return this._StatusDate.Date.Date;
			}
			set
			{
				if ((this._StatusDate != value))
				{
					this.OnStatusDateChanging(value);
					this.SendPropertyChanging();
					this._StatusDate = value;
					this.SendPropertyChanged("StatusDate");
					this.OnStatusDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StatusText
		{
			get
			{
				return this._StatusText;
			}
			set
			{
				if ((this._StatusText != value))
				{
					this.OnStatusTextChanging(value);
					this.SendPropertyChanging();
					this._StatusText = value;
					this.SendPropertyChanged("StatusText");
					this.OnStatusTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPacRefId", DbType="Int NOT NULL")]
		public int WorkPacRefId
		{
			get
			{
				return this._WorkPacRefId;
			}
			set
			{
				if ((this._WorkPacRefId != value))
				{
					if (this._WorkPacRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkPacRefIdChanging(value);
					this.SendPropertyChanging();
					this._WorkPacRefId = value;
					this.SendPropertyChanged("WorkPacRefId");
					this.OnWorkPacRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPacRef_StatusReport", Storage="_WorkPacRef", ThisKey="WorkPacRefId", OtherKey="WorkPacRefId", IsForeignKey=true)]
		public WorkPacRef WorkPacRef
		{
			get
			{
				return this._WorkPacRef.Entity;
			}
			set
			{
				WorkPacRef previousValue = this._WorkPacRef.Entity;
				if (((previousValue != value) 
							|| (this._WorkPacRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkPacRef.Entity = null;
						previousValue.StatusReports.Remove(this);
					}
					this._WorkPacRef.Entity = value;
					if ((value != null))
					{
						value.StatusReports.Add(this);
						this._WorkPacRefId = value.WorkPacRefId;
					}
					else
					{
						this._WorkPacRefId = default(int);
					}
					this.SendPropertyChanged("WorkPacRef");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
