////////////////////////////////////////////////////////////////////////////////
// CredentialFile.cs - Manage Save and load users' account                    //
//                                                                            //
// version 1.0                                                                //
// Language:     C# 4.0                                                       //
// Platform:     Windows 7                                                    //
// Application:  CSE784 Final Project EskimoDb                                //
// Author:       Yang Ge                                                      //    
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/*
  * Module Operations
  * =================
  * 
  * This class is a part of AuthServer Package, it has the interface to receive the 
  * username, harshed password and tag. It also verify the existence of the password 
  * and username.
  * 
  * Class CredentialFile has an inner class named UserInfo, it has three properties.
  * username, harshed password and salt 
  * 
  * 
  * 
  * Public Interface
  * ================
  * public CredentialFile()                                 //constructor, create a txt file named UserAccount
  * public void AddUser(string username, string sha256Password, string saltTag)    
  *                                                         // Add new user account
  * public bool UserAuthenticate(string username, string password)       
  *                                                         // used in verifying login Module
  * public bool CheckPasswordExists(string password)        // check the existence of the password
  * public bool CheckUserExists(string username)            // check the existence of the username
  * 
  */
/*
  * Build Process
  * =============
  * Required Files:
  *   HarshCodeConverter.cs
  * 
  * Maintenance History
  * ===================
  * 
  * ver 1.0 : 13 Oct 11
  *   - first release
  * 
  */
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace edu.syr.cse784.eskimodb.authserver
{
    class CredentialFile
    {
        private string m_FullFilePath;
        private static List<UserInfo> m_UserInfoDatabase;
        private class UserInfo 
        {
            //class that store the information of the user, its
            /// <summary>
            /// Constructor of UserInfo class
            /// </summary>
            /// <param name="username">the username of the user</param>
            /// <param name="password">the password of the user</param>
            /// <param name="salt">the salt of the user</param>
            public UserInfo(string username, string password, string salt)
            {
                m_UserName = username;
                m_Password = password;
                m_SaltTag = salt;
                m_Admin = false;
            }
            public string m_UserName;
            public string m_Password;
            public string m_SaltTag;
            public bool m_Admin;
        }
        /// <summary>
        /// Constructor of CredentialFile class
        /// </summary>
        public CredentialFile()
        {
            // Generate random file name
            string salt = new GenerateSalt().RandomSalt();
            m_FullFilePath = "UserAccount_" + salt + ".txt";
            m_UserInfoDatabase = new List<UserInfo>();
            if (!File.Exists(m_FullFilePath))
            {
                FileStream fs = File.Create(m_FullFilePath);
                fs.Close();
            }
            else
            {
                LoadCredentialFile();
            }
            HarshCodeConverter hashcode = new HarshCodeConverter();
            UserInfo Admin = new UserInfo("Admin", hashcode.Convert("111111111111abc"), "abc");
            Admin.m_Admin = true;
            m_UserInfoDatabase.Add(Admin);
        }

        /// <summary>
<<<<<<< local
        /// 
=======
        /// Copy constructor
>>>>>>> other
        /// </summary>
<<<<<<< local
        /// <param name="cf"></param>
=======
        /// <param name="cf">another instance of CredentialFile class</param>
>>>>>>> other
        public CredentialFile(CredentialFile cf)
        {
            // Generate random file name
            string salt = new GenerateSalt().RandomSalt();
            m_FullFilePath = "UserAccount_" + salt + ".txt";
            if (!File.Exists(m_FullFilePath))
            {
                FileStream fs = File.Create(m_FullFilePath);
                fs.Close();
            }
            // Copy the current user info
           // m_UserInfoDatabase = new List<UserInfo>(cf.m_UserInfoDatabase);
            this.SaveCredentialFile();
        }
<<<<<<< local

=======
>>>>>>> other
        /// <summary>
<<<<<<< local
        /// 
=======
        /// Add another user
>>>>>>> other
        /// </summary>
<<<<<<< local
        /// <param name="username"></param>
        /// <param name="sha256Password"></param>
        /// <param name="saltTag"></param>
=======
        /// <param name="username">username</param>
        /// <param name="sha256Password">the password has been sha'ed</param>
        /// <param name="saltTag">the salted tag which is used to verify the password</param>
>>>>>>> other
        public void AddUser(string username, string sha256Password, string saltTag) 
        {
            if (!File.Exists(m_FullFilePath))
            {
                throw new FieldAccessException();
            }
            if ((username.Length <= 0) || (sha256Password.Length <= 0) || (saltTag.Length <= 0))
            {
                throw new ArgumentNullException();
            }
            if (m_UserInfoDatabase == null)
            {
                m_UserInfoDatabase = new List<UserInfo>();
            }
            UserInfo user = new UserInfo(username, sha256Password, saltTag);
            m_UserInfoDatabase.Add(user);
            // Write back the all user info
            SaveCredentialFile();
        }
        /// <summary>
        /// Used for log in to authenticate a user
        /// </summary>
        /// <param name="username">username of the user</param>
        /// <param name="password">password of the user</param>
        /// <returns></returns>
        public bool UserAuthenticate(string username, string password)
        {
            HarshCodeConverter hashcode = new HarshCodeConverter();
            if (m_UserInfoDatabase == null)
            {
                LoadCredentialFile();
            }
            for (int i = 0; i < m_UserInfoDatabase.Count; ++i)
            {
                if (m_UserInfoDatabase[i].m_UserName == username)
                {
                    string saltedPassword = password + m_UserInfoDatabase[i].m_SaltTag;
                    string hashedPassword = hashcode.Convert(saltedPassword);
                    if (m_UserInfoDatabase[i].m_Password == hashedPassword)
                    {
                        return true;
                    }
                }
            }
            return false;
        }
        /// <summary>
        /// Check if the password exists or not, 
        /// because two users are not allowed to have same password.
        /// </summary>
        /// <param name="password">just the password</param>
        /// <returns></returns>
        public bool CheckPasswordExists(string password)
        {
            HarshCodeConverter hashcode = new HarshCodeConverter();
            if (m_UserInfoDatabase == null)
            {
                LoadCredentialFile();
            }
            try
            {
                for (int i = 0; i < m_UserInfoDatabase.Count; ++i)
                {
                    string saltedPassword = password + m_UserInfoDatabase[i].m_SaltTag;
                    string hashedPassword = hashcode.Convert(saltedPassword);
                    if (m_UserInfoDatabase[i].m_Password == hashedPassword)
                    {
                        return true;
                    }
                }
            }
            catch { }
            return false;
        }
        /// <summary>
        /// Check if the username has been used or not
        /// </summary>
        /// <param name="username">username of the user</param>
        /// <returns>if exists, return true, if not, return false</returns>
        public bool CheckUserExists(string username)
        {
            if (m_UserInfoDatabase == null)
            {
                LoadCredentialFile();
            }
            try
            {
                for (int i = 0; i < m_UserInfoDatabase.Count; ++i)
                {
                    if (m_UserInfoDatabase[i].m_UserName == username)
                    {
                        return true;
                    }
                }
            }
            catch { }
            return false;
        }
        /// <summary>
        /// Change the privilege of a normal user to administrator
        /// </summary>
        /// <param name="userName">The user name of the normal user</param>
        /// <param name="administrator">change to administrator or not</param>
        /// <param name="msg">output message</param>
        /// <returns>successfully changed, return true, wrong, return false</returns>
        public bool ChangePrivilege(string userName, bool administrator, out string msg) 
        {
            foreach (UserInfo userInfo in m_UserInfoDatabase)
            {
                if (userInfo.m_UserName == userName)
                {
                    userInfo.m_Admin = administrator;
                    msg = "Successfully Change Privilege";
                    return true;
                }
            }
            msg = "Fail to Change Privilege";
            return false;
        }
        /// <summary>
        /// change a password of a user
        /// </summary>
        /// <param name="username">The user name of the user to be changed</param>
        /// <param name="sha256Password">The sha'ed new password</param>
        /// <param name="saltTag">The saltTag for the user</param>
        /// <returns>messages to indicate if changing password success or not</returns>
        public string ChangePwd(string username, string sha256Password, string saltTag)
        {
            for (int index = 0; index < m_UserInfoDatabase.Count; index++)
            {
                if (m_UserInfoDatabase[index].m_UserName == username)
                {
                    m_UserInfoDatabase.RemoveAt(index);
                    UserInfo user = new UserInfo(username, sha256Password, saltTag);
                    m_UserInfoDatabase.Add(user);
                    SaveCredentialFile();
                    return "Successfully Change Password!";
                }
            }
            return "Fail to Change Password!";
        }
        /// <summary>
        /// Return the names of all the registered users
        /// </summary>
        /// <returns>a list containing all user names</returns>
        public List<string> RetrieveAllUserNames() 
        {
            List<string> allUserName = new List<string>();
            foreach (UserInfo user in m_UserInfoDatabase) 
            {
                allUserName.Add(user.m_UserName);
            }
            return allUserName;
        }

        public bool CheckAdmin(string userName)
        {
            foreach (UserInfo userInfo in m_UserInfoDatabase)
            {
                if (userInfo.m_UserName == userName)
                    return userInfo.m_Admin;
            }
            return false;
        }

        private void LoadCredentialFile()
        {
            try
            {
                if (m_UserInfoDatabase.Count != 0)
                {
                    m_UserInfoDatabase.Clear();
                }
            }
            catch { }
            StreamReader sr = new StreamReader(m_FullFilePath);
            string line;
            try
            {
                while ((line = sr.ReadLine()) != null)
                {
                    string[] fields = line.Split(':');
                    UserInfo user = new UserInfo(fields[0], fields[1], fields[2]);
                    m_UserInfoDatabase.Add(user);
                }
            }
            catch(Exception e){
                Console.WriteLine(e.Message.ToString());

            }
            sr.Close();
            return;
        }
        private void SaveCredentialFile()
        {
            if (m_UserInfoDatabase == null)
            {
                throw new InvalidDataException();
            }
            StreamWriter sw = new StreamWriter(m_FullFilePath);
            for (int i = 0; i < m_UserInfoDatabase.Count; ++i)
            {
                UserInfo user = m_UserInfoDatabase[i];
                string userInfo = user.m_UserName+":"+user.m_Password+":"+user.m_SaltTag+"\n";
                sw.Write(userInfo);
            }
            sw.Close();
        }
    }
}
