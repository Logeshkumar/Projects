using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ITestInterface;
using edu.syr.cse784.eskimodb.rootserver;

namespace edu.syr.cse784.eskimodb.rootserver.Test
{
  public class ParserTest : ITest
  {
    private List<string> m_MessageList = new List<string>();
    public bool Test()
    {
      if (!case1())
      {
        Message message = new Message();
        message.Msg = "Failure while processing CREATE DB query";
        message.TestID = 1;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case2())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing database name and semicolon in CREATE DB query";
        message.TestID = 2;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case3())
      {
        Message message = new Message();
        message.Msg = "Exceptiion was not thrown for missing semicolon in CREATE DB query";
        message.TestID = 3;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case4())
      {
        Message message = new Message();
        message.Msg = "Exceptiion was not thrown for missing database name in CREATE DB query";
        message.TestID = 4;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case5())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing CREATE TABLE query";
        message.TestID = 5;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case6())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in CREATE TABLE query";
        message.TestID = 6;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case7())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing table name in CREATE TABLE query";
        message.TestID = 7;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case8())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for extra space betwwen the kewords CREATE and TABLE in CREATE TABLE query";
        message.TestID = 8;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case9())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for inputting lowercase and uppercase keywords in tha same CREATE TABLE query";
        message.TestID = 9;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case10())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing SELECT DB query";
        message.TestID = 10;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case11())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in the SELECT DB query";
        message.TestID = 11;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case12())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing database name in the SELECT DB query";
        message.TestID = 12;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case13())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for additional spaces between the keywords SELECT and DB in SELECT DB query"; ;
        message.TestID = 13;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case14())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper syntax in the SELECT DB query";
        message.TestID = 14;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case15())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing DELETE DB query";
        message.TestID = 15;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case16())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in the DELETE DB query";
        message.TestID = 16;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case17())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing database name in the DELETE DB query";
        message.TestID = 17;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case18())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for additional spaces between keywords DELETE and DB in DELETE DB query";
        message.TestID = 18;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case19())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper syntax in DELETE DB query";
        message.TestID = 19;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case20())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing DELETE TABLE query";
        message.TestID = 20;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case21())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in the DELETE TABLE query";
        message.TestID = 21;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case22())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing table name in the DELETE TABLE query";
        message.TestID = 22;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case23())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for additional spaces between Keywords DELETE and TABLE in the DELETE TABLE query";
        message.TestID = 23;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case24())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper syntax in the DELETE TABLE query";
        message.TestID = 24;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case25())
      {
        Message message = new Message();
        message.Msg = "Failure in processing EMPTY TABLE query";
        message.TestID = 25;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case26())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in the EMPTY TABLE query";
        message.TestID = 26;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case27())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing table name in the EMPTY TABLE query";
        message.TestID = 27;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case28())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper spacing between Keywords EMPTY and TABLE in the EMPTY TABLE query";
        message.TestID = 28;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case29())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper syntax in the EMPTY TABLE query";
        message.TestID = 29;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case30())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing DELETE COLUMN query";
        message.TestID = 30;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case31())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in the DELETE COLUMN query";
        message.TestID = 31;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case32())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing table name in the DELETE COLUMN query";
        message.TestID = 32;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case33())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing column name in the DELETE COLUMN query";
        message.TestID = 33;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case34())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing COLUMN Keyword in the DELETE COLUMN query";
        message.TestID = 34;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case35())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper syntax in the DELETE COLUMN query";
        message.TestID = 35;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case36())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing ADD COLUMN query";
        message.TestID = 36;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case37())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in the ADD COLUMN query";
        message.TestID = 37;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case38())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing table name in the ADD COLUMN query";
        message.TestID = 38;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case39())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing column name in the ADD COLUMN query";
        message.TestID = 39;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case40())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing COLUMN Keyword in the ADD COLUMN query";
        message.TestID = 40;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case41())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper syntax in the ADD COLUMN query";
        message.TestID = 41;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case42())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing INSERT Query";
        message.TestID = 42;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case43())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing semicolon in the INSERT query";
        message.TestID = 43;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case44())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing table name in the INSERT query";
        message.TestID = 44;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case45())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing VALUES Keyword in the INSERT query";
        message.TestID = 45;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case46())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for improper spacing between Keywords INSERT and INTO in the INSERT query";
        message.TestID = 46;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case47())
      {
        Message message = new Message();
        message.Msg = "Exception was not thrown for missing comma in between the column names in the INSERT query";
        message.TestID = 47;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case48())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing basic SELECT query";
        message.TestID = 48;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case49())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with WHERE clause";
        message.TestID = 49;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case50())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with ORDER BY clause";
        message.TestID = 50;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case51())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with LIMIT range";
        message.TestID = 51;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case52())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with WHERE and ORDER BY clauses";
        message.TestID = 52;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case53())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with WHERE and LIMIT clauses";
        message.TestID = 53;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case54())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with ORDER BY and LIMIT clauses";
        message.TestID = 54;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case55())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with WHERE, ORDER BY and LIMIT clauses";
        message.TestID = 55;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case56())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query which selects specific columns";
        message.TestID = 56;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case57())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with COUNT";
        message.TestID = 57;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case58())
      {
        Message message = new Message();
        message.Msg = "Failure occurred while processing SELECT query with COUNT";
        message.TestID = 58;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
       if (!case59())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing RENAME TABLE Query";
        message.TestID = 59;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }
      if (!case60())
      {
        Message message = new Message();
        message.Msg = "Failure occured while processing RENAME COLUMN Query";
        message.TestID = 60;
        message.Passed = false;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return false;
      }

      return true;
    }

    public List<string> GetMessage()
    {
      return m_MessageList;
    }
    public List<string> ConvertFromMessageToString()
    {
      List<string> ret = new List<string>();
      return ret;
    }

    private bool case1()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("create db dbname;");
      if (statementObject.getStatementType() != StatementType.CREATE_DB)
        return false;
      if (((CreateDB)statementObject).getDatabaseName() != "dbname")
        return false;
      Message message = new Message();
      message.Msg = "CREATE DB query was executed sucesfully ";
      message.TestID = 1;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }

    private bool case2()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("create db ");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing database name and semicolon in CREATE DB query";
        message.TestID = 2;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    private bool case3()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("create db dbname");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exceptiion was thrown for missing semicolon in CREATE DB query";
        message.TestID = 3;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }    
    }

    private bool case4()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("create db;");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exceptiion was thrown for missing database name in CREATE DB query";
        message.TestID = 4;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    private bool case5()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("CREATE TABLE table1(PRIMARY KEY key1 VARCHAR(255));");
        if (statementObject.getStatementType() != StatementType.CREATE_TABLE)
          return false;
        CreateTable tabObj = (CreateTable)statementObject;
        List<TableColumn> columnList = new List<TableColumn>();
        if (tabObj.getTableName() != "table1")
          return false;
        columnList = tabObj.getList();
        foreach (TableColumn column in columnList)
        {
          if (column.getUniqueKey() != "PRIMARY KEY")
            return false;
          if (column.getColumnName() != "key1")
            return false;
          if (column.getVarType() != "VARCHAR")
            return false;
          if (column.getVarRange() != "255")
            return false;
        }

        Message message = new Message();
        message.Msg = "CREATE TABLE query was executed successfully";
        message.TestID = 5;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }

    }

    // testcase for no semicolon at the end of the query
    // handling the exception 
    private bool case6()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("CREATE TABLE table1(PRIMARY KEY key1 VARCHAR(255))");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing semicolon in CREATE TABLE query";
        message.TestID = 6;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    // test case for no table name in the query.. handling the exception
    private bool case7()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("CREATE TABLE (PRIMARY KEY key1 VARCHAR(255))");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing table name in CREATE TABLE query";
        message.TestID = 7;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // checking if there is a space between tablename and open parenthesis
    // according to the sql given there shouldn be any.. so throwing error.
    private bool case8()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("CREATE  TABLE table1 (PRIMARY KEY key1 VARCHAR(255));");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for extra space betwwen the kewords CREATE and TABLE in CREATE TABLE query";
        message.TestID = 8;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // Checking lowercase and uppercase in the query inputted(create TABLE)
    private bool case9()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("create TABLE table1 (PRIMARY KEY key1 VARCHAR(255))");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for inputting lowercase and uppercase keywords in tha same CREATE TABLE query";
        message.TestID = 9;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    private bool case10()
    {
      QParser qParser = new QParser();
      try
      {
        string m_SelectDb = "SELECT DB databasename1;";
        if (!m_SelectDb.Contains(";"))
          return false;
        Statement statementObject = qParser.validateQuery(m_SelectDb);
        if (statementObject.getStatementType() != StatementType.SELECT_DB)
          return false;
        SelectDB dbObj = (SelectDB)statementObject;
        if (dbObj.getDatabaseName() != "databasename1")
          return false;
        Message message = new Message();
        message.Msg = "SELECT DB query was executed successfully";
        message.TestID = 10;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false ;
      }

    }

    // testcase for no semicolon at the end of the query
    // handling the exception 
    private bool case11()
    {
      QParser qParser = new QParser();
      try
      {
        string m_SelectDb = "SELECT DB databasename1";
        Statement statementObject = qParser.validateQuery(m_SelectDb);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing semicolon in the SELECT DB query";
        message.TestID = 11;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    // test case for no database name in the query.. handling the exception
    private bool case12()
    {
      QParser qParser = new QParser();
      try
      {
        string m_SelectDb = "SELECT DB;";
        Statement statementObject = qParser.validateQuery(m_SelectDb);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing database name in the SELECT DB query";
        message.TestID = 12;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }


    //checking if there are extra spaces between the strings in the query
    private bool case13()
    {
      QParser qParser = new QParser();
      try
      {
        string m_SelectDb = "SELECT  DB databasename1;";
        Statement statementObject = qParser.validateQuery(m_SelectDb);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for additional spaces between the keywords SELECT and DB in SELECT DB query"; ;
        message.TestID = 13;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // there is a possibility that the user can input DATABASE instead
    // of DB as .. So checking for error handling
    private bool case14()
    {
      QParser qParser = new QParser();
      try
      {
        string m_SelectDb = "SELECT database databasename1;";
        Statement statementObject = qParser.validateQuery(m_SelectDb);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper syntax in the SELECT DB query";
        message.TestID = 14;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }
    private bool case15()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteDb = "DELETE DB databasename1;";
        if (!m_DeleteDb.Contains(";"))
          return false;
        Statement statementObject = qParser.validateQuery(m_DeleteDb);
        if (statementObject.getStatementType() != StatementType.DELETE_DB)
          return false;
        DeleteDB dbObj = (DeleteDB)statementObject;
        if (dbObj.getDatabaseName() != "databasename1")
          return false;
        Message message = new Message();
        message.Msg = "DELETE DB query was executed successfully";
        message.TestID = 15;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }

    }

    // testcase for no semicolon at the end of the query
    // handling the exception 
    private bool case16()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteDb = "DELETE DB databasename1";
        Statement statementObject = qParser.validateQuery(m_DeleteDb);
          return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing semicolon in the DELETE DB query";
        message.TestID = 16;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // test case for no database name in the query.. handling the exception
    private bool case17()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteDb = "DELETE DB;";
        Statement statementObject = qParser.validateQuery(m_DeleteDb);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing database name in the DELETE DB query";
        message.TestID = 17;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    //checking if there are extra spaces between the strings in the query
    
    private bool case18()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteDb = "DELETE  DB databasename1;";
        Statement statementObject = qParser.validateQuery(m_DeleteDb);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for additional spaces between keywords DELETE and DB in DELETE DB query";
        message.TestID = 18;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // there is a possibility that the user can input DATABASE instead
    // of DB as .. So checking for error handling
    private bool case19()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteDb = "DELETE DATABASE databasename1;";
        Statement statementObject = qParser.validateQuery(m_DeleteDb);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper syntax in DELETE DB query";
        message.TestID = 19;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }
    private bool case20()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteTab = "DELETE TABLE tablename1;";
        if (!m_DeleteTab.Contains(";"))
          return false;
        Statement statementObject = qParser.validateQuery(m_DeleteTab);
        if (statementObject.getStatementType() != StatementType.DELETE_TABLE)
          return false;
        DeleteTable tabObj = (DeleteTable)statementObject;
        if (tabObj.getTableName() != "tablename1")
          return false;
        Message message = new Message();
        message.Msg = "DELETE TABLE query was executed successfully";
        message.TestID = 20;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }

    }

    // testcase for no semicolon at the end of the query
    // handling the exception 
    private bool case21()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteTab = "DELETE TABLE tablename1";
        Statement statementObject = qParser.validateQuery(m_DeleteTab);
          return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing semicolon in the DELETE TABLE query";
        message.TestID = 21;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    // test case for no table name in the query.. handling the exception
    private bool case22()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteTab = "DELETE TABLE;";
        Statement statementObject = qParser.validateQuery(m_DeleteTab);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing table name in the DELETE TABLE query";
        message.TestID = 22;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    //checking if there are extra spaces between the strings in the query
    private bool case23()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteTab = "DELETE  TABLE tablename1;";
        Statement statementObject = qParser.validateQuery(m_DeleteTab);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for additional spaces between Keywords DELETE and TABLE in the DELETE TABLE query";
        message.TestID = 23;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // there is a possibility that the user can input TAB instead
    // of TABLE as given .. So checking for error handling
    private bool case24()
    {
      QParser qParser = new QParser();
      try
      {
        string m_DeleteTab = "DELETE TAB tablename1;";
        Statement statementObject = qParser.validateQuery(m_DeleteTab);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper syntax in the DELETE TABLE query";
        message.TestID = 24;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    private bool case25()
    {
      QParser qParser = new QParser();
      try
      {
        string m_EmptyTab = "EMPTY TABLE tablename1;";
        if (!m_EmptyTab.Contains(";"))
          return false;
        Statement statementObject = qParser.validateQuery(m_EmptyTab);
        if (statementObject.getStatementType() != StatementType.EMPTY_TABLE)
          return false;
        EmptyTable tabObj = (EmptyTable)statementObject;
        if (tabObj.getTableName() != "tablename1")
          return false;
        Message message = new Message();
        message.Msg = "EMPTY TABLE query was executed sucessfully";
        message.TestID = 25;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }

    }

    // testcase for no semicolon at the end of the query
    // handling the exception 
    private bool case26()
    {
      QParser qParser = new QParser();
      try
      {
        string m_EmptyTab = "EMPTY TABLE tablename1";
        Statement statementObject = qParser.validateQuery(m_EmptyTab);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing semicolon in the EMPTY TABLE query";
        message.TestID = 26;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    // test case for no table name in the query.. handling the exception
    private bool case27()
    {
      QParser qParser = new QParser();
      try
      {
        string m_EmptyTab = "EMPTY TABLE";
        Statement statementObject = qParser.validateQuery(m_EmptyTab);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing table name in the EMPTY TABLE query";
        message.TestID = 27;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    //checking if there are extra spaces between the strings in the query
    private bool case28()
    {
      QParser qParser = new QParser();
      try
      {
        string m_EmptyTab = "EMPTY  TABLE tablename1;";
        Statement statementObject = qParser.validateQuery(m_EmptyTab);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper syntax in the EMPTY TABLE query";
        message.TestID = 28;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    // there is a possibility that the user can input TAB instead
    private bool case29()
    {
      QParser qParser = new QParser();
      try
      {
        string m_EmptyTab = "EMPTY TAB tablename1;";
        Statement statementObject = qParser.validateQuery(m_EmptyTab);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper syntax in the EMPTY TABLE query";
        message.TestID = 29;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }
    private bool case30()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabD = "DELETE COLUMN columnname1 IN TABLE tablename1;";
        if (!m_ModifyTabD.Contains(";"))
          return false;
        Statement statementObject = qParser.validateQuery(m_ModifyTabD);
        if (statementObject.getStatementType() != StatementType.MOD_TABLE)
          return false;
        ModifyTab tabObj = (ModifyTab)statementObject;
        if (tabObj.getDelcolumnData().getTableName() != "tablename1")
          return false;
        if (tabObj.getDelcolumnData().getColumnData() != "columnname1")
          return false;
        if (tabObj.getType() != "DELETE")
          return false;
        Message message = new Message();
        message.Msg = "DELETE COLUMN query was executed successfully";
        message.TestID = 30;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }

    }


    // testcase for no semicolon at the end of the query
    // handling the exception
    private bool case31()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabD = "DELETE COLUMN columnname1 IN TABLE tablename1";
        Statement statementObject = qParser.validateQuery(m_ModifyTabD);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing semicolon in the DELETE COLUMN query";
        message.TestID = 31;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // test case for no table name in the query.. handling the exception
    private bool case32()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabD = "DELETE COLUMN columnname1 IN TABLE;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabD);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing table name in the DELETE COLUMN query";
        message.TestID = 32;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }


    // test case for no column name in the query.. handling the exception
    private bool case33()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabD = "DELETE COLUMN IN TABLE tablename1;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabD);
        return false;
      }
      catch (Exception ex)
      {
        Message message = new Message();
        message.Msg = "Exception was thrown for missing column name in the DELETE COLUMN query";
        message.TestID = 33;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    //no COLUMN key word
    private bool case34()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabD = "DELETE columnname1 IN TABLE tablename1;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabD);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing COLUMN Keyword in the DELETE COLUMN query";
        message.TestID = 34;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // there is a possibility that the user can input TAB instead
    // of TABLE as .. So checking for error handling
    private bool case35()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabD = "DELETE COLUMN columnname1 IN TAB tablename1;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabD);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper syntax in the DELETE COLUMN query";
        message.TestID = 35;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }
    private bool case36()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabA = "ADD COLUMN PRIMARY KEY key1 INT IN TABLE tablename1;";
        if (!m_ModifyTabA.Contains(";"))
          return false;
        Statement statementObject = qParser.validateQuery(m_ModifyTabA);
        if (statementObject.getStatementType() != StatementType.MOD_TABLE)
          return false;
        ModifyTab tabObj = (ModifyTab)statementObject;
        if (tabObj.getAddColumnData().getTableName() != "tablename1")
          return false;
        if (tabObj.getAddColumnData().getColumnData().getUniqueKey() != "PRIMARY KEY")
          return false;
        if (tabObj.getType() != "ADD")
          return false;
        if (tabObj.getAddColumnData().getColumnData().getColumnName() != "key1")
        return false;
        if (tabObj.getAddColumnData().getColumnData().getVarType() != "INT")
          return false;
        Message message = new Message();
        message.Msg = "ADD COLUMN query was executed successfully";
        message.TestID = 36;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }
    }

    // testcase for no semicolon at the end of the query
    // handling the exception
    private bool case37()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabA = "ADD COLUMN PRIMARY KEY columnname1 CHAR IN TABLE tablename1";
        Statement statementObject = qParser.validateQuery(m_ModifyTabA);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing semicolon in the ADD COLUMN query";
        message.TestID = 37;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // test case for no table name in the query.. handling the exception
    private bool case38()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabA = "ADD COLUMN PRIMARY KEY columnname1 CHAR IN TABLE;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabA);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing table name in the ADD COLUMN query";
        message.TestID = 38;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    // test case for no column name in the query.. handling the exception
    private bool case39()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabA = "ADD COLUMN PRIMARY KEY CHAR IN TABLE tablename1;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabA);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing column name in the ADD COLUMN query";
        message.TestID = 39;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }


    //no COLUMN keyword
    private bool case40()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabA = "ADD PRIMARY KEY columnname1 CHAR IN TABLE tablename1;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabA);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing COLUMN Keyword in the ADD COLUMN query";
        message.TestID = 40;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }


    // there is a possibility that the user can input TAB instead
    // of TABLE as .. So checking for error handling
    private bool case41()
    {
      QParser qParser = new QParser();
      try
      {
        string m_ModifyTabA = "ADD COLUMN PRIMARY KEY columnname1 CHAR IN TAB tablename1;";
        Statement statementObject = qParser.validateQuery(m_ModifyTabA);
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper syntax in the ADD COLUMN query";
        message.TestID = 41;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }

    }

    private bool case42()
    {
      QParser qParser = new QParser();
      List<string> ColumnList = new List<string>();      
      Statement statementObject = qParser.validateQuery("INSERT INTO c.tab1(col1,col2,col3)VALUES(val1,2,2.0);");
      if (statementObject.getStatementType() != StatementType.INSERT_ROW)
      return false;
      InsertRow insertObj = (InsertRow)statementObject;
      if(insertObj.getTableName() !="c.tab1")
       return false;
      ColumnList = insertObj.getList();
      if(ColumnList[0]!="col1" && ColumnList[1] !="col2" && ColumnList[2] !="col3")
      return false;
      List<ColumnValue> lis = new List<ColumnValue>();
      lis = insertObj.getValueList();   
      if (lis[0].getStringColumnValue() != "val1" && lis[1].getIntColumnValue() != 2  && lis[2].getDoubleColumnValue() != 2.0)
      return false;
      if (lis[0].getColumnValueType() != ColValueType.STRING && lis[1].getColumnValueType() != ColValueType.INTEGER && lis[2].getColumnValueType() != ColValueType.DOUBLE)
        return false;
      Message message = new Message();
      message.Msg = "INSERT Query was executed successfully";
      message.TestID = 42;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }

    //missing semicolon
    private bool case43()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("INSERT INTO c.tab1(col1,col2,col3)VALUES(val1,val2,val3)");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception thrown for missing semicolon in the INSERT query";
        message.TestID = 43;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      } 
    }

    //missing table name
    private bool case44()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("INSERT INTO (col1,col2,col3)VALUES(val1,val2,val3);");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing table name in the INSERT query";
        message.TestID = 44;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    //missing values
    private bool case45()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("INSERT INTO c.tab1(col1,col2,col3)(val1,val2,val3);");
        return false;
      }
      catch (Exception ex)
      {
        Message message = new Message();
        message.Msg = "Exception was thrown for missing VALUES Keyword in the INSERT query";
        message.TestID = 45;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        ex.ToString();
        return true;
      }
    }

    //space between INSERT INTO and remaining parts
    private bool case46()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("INSERT  INTO c.tab1(col1,col2,col3)VALUES(val1,val2,val3);");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for improper spacing between Keywords INSERT and INTO in the INSERT query";
        message.TestID = 46;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }

    //no comas between the columns
    private bool case47()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("INSERT INTO c.tab1(col1 col2 col3)VALUES(val1,val2,val3);");
        return false;
      }
      catch (Exception ex)
      {
        ex.ToString();
        Message message = new Message();
        message.Msg = "Exception was thrown for missing comma in between the column names in the INSERT query";
        message.TestID = 47;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
    }


    /*
     *Test case for a basic select statement without the where and orderby clause.
     */
    private bool case48()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;

      Message message = new Message();
      message.Msg = "Basic SELECT query was executed successfully";
      message.TestID = 48;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }


    /*
     * Test case for select query with where clause and three columns. 
     */ 
    private bool case49()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename where col1=47 and col2 = testcol and col3=44.5;");

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;
      
      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
      {
        List<WhereEntry> whereEntryList = ((SelectRows)statementObject).getWhereList().getSubWhereList().getWhereEntryList();
        if (whereEntryList[0].getColumnName() != "col1")
          return false;
        if (whereEntryList[0].getColumnValue().getColumnValueType() == ColValueType.INTEGER)
          if (whereEntryList[0].getColumnValue().getIntColumnValue() != 47)
            return false;

        if (whereEntryList[1].getColumnName() != "col2")
          return false;
        if (whereEntryList[1].getColumnValue().getColumnValueType() == ColValueType.STRING)
          if (whereEntryList[1].getColumnValue().getStringColumnValue() != "testcol")
            return false;

        if (whereEntryList[2].getColumnName() != "col3")
          return false;
        if (whereEntryList[2].getColumnValue().getColumnValueType() == ColValueType.DOUBLE)
          if (whereEntryList[2].getColumnValue().getDoubleColumnValue() != 44.5)
            return false;
      }
      else
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with WHERE clause was executed successfully";
      message.TestID = 49;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);

      return true;
    }

    /*
     * Test case for select query with orderby clause 
     */ 
    private bool case50()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename order by col1 asc, col2 dsc;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
      {
        List<OrderByEntry> orderByList = ((SelectRows)statementObject).getOrderByList().getSubOrderBylist().getOrderByEntryList();

        if (orderByList[0].getColumnName() != "col1")
          return false;
        if (orderByList[0].getOrderByType() != "ASC")
          return false;

        if (orderByList[1].getColumnName() != "col2")
          return false;
        if (orderByList[1].getOrderByType() != "DSC")
          return false;
      }
      else 
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with ORDER BY clause was executed successfully";
      message.TestID = 50;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }


    /*
     * Test case for select query with limit range 
     */
    private bool case51()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename limit 10 , 20;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;
      
      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
      {
        if (((SelectRows)statementObject).getLimitRange().getStartIndex() != 10)
          return false;
        if (((SelectRows)statementObject).getLimitRange().getCount() != 20)
          return false;
      }
      else
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with LIMIT range was executed successfully";
      message.TestID = 51;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }

    /*
     * Test case for select query for where and order by
     */
    private bool case52()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename where col1=47 and col2 = testcol and col3=44.5 order by col1 asc, col2 dsc;");

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
      {
        List<OrderByEntry> orderByList = ((SelectRows)statementObject).getOrderByList().getSubOrderBylist().getOrderByEntryList();

        if (orderByList[0].getColumnName() != "col1")
          return false;
        if (orderByList[0].getOrderByType() != "ASC")
          return false;

        if (orderByList[1].getColumnName() != "col2")
          return false;
        if (orderByList[1].getOrderByType() != "DSC")
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
      {
        List<WhereEntry> whereEntryList = ((SelectRows)statementObject).getWhereList().getSubWhereList().getWhereEntryList();
        if (whereEntryList[0].getColumnName() != "col1")
          return false;
        if (whereEntryList[0].getColumnValue().getColumnValueType() == ColValueType.INTEGER)
          if (whereEntryList[0].getColumnValue().getIntColumnValue() != 47)
            return false;

        if (whereEntryList[1].getColumnName() != "col2")
          return false;
        if (whereEntryList[1].getColumnValue().getColumnValueType() == ColValueType.STRING)
          if (whereEntryList[1].getColumnValue().getStringColumnValue() != "testcol")
            return false;

        if (whereEntryList[2].getColumnName() != "col3")
          return false;
        if (whereEntryList[2].getColumnValue().getColumnValueType() == ColValueType.DOUBLE)
          if (whereEntryList[2].getColumnValue().getDoubleColumnValue() != 44.5)
            return false;
      }
      else
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with WHERE and ORDER BY clauses was executed successfully";
      message.TestID = 52;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }


    /*
     * Test case for select query for where clause and limit clause
     */
    private bool case53()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename where col1=47 and col2 = testcol and col3=44.5 limit 10 , 20;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
      {
        if (((SelectRows)statementObject).getLimitRange().getStartIndex() != 10)
          return false;
        if (((SelectRows)statementObject).getLimitRange().getCount() != 20)
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
      {
        List<WhereEntry> whereEntryList = ((SelectRows)statementObject).getWhereList().getSubWhereList().getWhereEntryList();
        if (whereEntryList[0].getColumnName() != "col1")
          return false;
        if (whereEntryList[0].getColumnValue().getColumnValueType() == ColValueType.INTEGER)
          if (whereEntryList[0].getColumnValue().getIntColumnValue() != 47)
            return false;

        if (whereEntryList[1].getColumnName() != "col2")
          return false;
        if (whereEntryList[1].getColumnValue().getColumnValueType() == ColValueType.STRING)
          if (whereEntryList[1].getColumnValue().getStringColumnValue() != "testcol")
            return false;

        if (whereEntryList[2].getColumnName() != "col3")
          return false;
        if (whereEntryList[2].getColumnValue().getColumnValueType() == ColValueType.DOUBLE)
          if (whereEntryList[2].getColumnValue().getDoubleColumnValue() != 44.5)
            return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with WHERE and LIMIT clauses was executed successfully";
      message.TestID = 53;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);

      return true;
    }


    /*
     * Test case for order by and limit clause
     */
    private bool case54()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename order by col1 asc, col2 dsc limit 10 , 20;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
      {
        if (((SelectRows)statementObject).getLimitRange().getStartIndex() != 10)
          return false;
        if (((SelectRows)statementObject).getLimitRange().getCount() != 20)
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
      {
        List<OrderByEntry> orderByList = ((SelectRows)statementObject).getOrderByList().getSubOrderBylist().getOrderByEntryList();

        if (orderByList[0].getColumnName() != "col1")
          return false;
        if (orderByList[0].getOrderByType() != "ASC")
          return false;

        if (orderByList[1].getColumnName() != "col2")
          return false;
        if (orderByList[1].getOrderByType() != "DSC")
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with ORDER BY and LIMIT clauses was executed successfully";
      message.TestID = 54;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);

      return true;
    }


    /*
     * Test case for select query  for where, order by and limit clause
     */
    private bool case55()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select * from tablename where col1=47 and col2 = testcol and col3=44.5 order by col1 asc, col2 dsc limit 10 , 20;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
      {
        if (((SelectRows)statementObject).getLimitRange().getStartIndex() != 10)
          return false;
        if (((SelectRows)statementObject).getLimitRange().getCount() != 20)
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
      {
        List<OrderByEntry> orderByList = ((SelectRows)statementObject).getOrderByList().getSubOrderBylist().getOrderByEntryList();

        if (orderByList[0].getColumnName() != "col1")
          return false;
        if (orderByList[0].getOrderByType() != "ASC")
          return false;

        if (orderByList[1].getColumnName() != "col2")
          return false;
        if (orderByList[1].getOrderByType() != "DSC")
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
      {
        List<WhereEntry> whereEntryList = ((SelectRows)statementObject).getWhereList().getSubWhereList().getWhereEntryList();
        if (whereEntryList[0].getColumnName() != "col1")
          return false;
        if (whereEntryList[0].getColumnValue().getColumnValueType() == ColValueType.INTEGER)
          if (whereEntryList[0].getColumnValue().getIntColumnValue() != 47)
            return false;

        if (whereEntryList[1].getColumnName() != "col2")
          return false;
        if (whereEntryList[1].getColumnValue().getColumnValueType() == ColValueType.STRING)
          if (whereEntryList[1].getColumnValue().getStringColumnValue() != "testcol")
            return false;

        if (whereEntryList[2].getColumnName() != "col3")
          return false;
        if (whereEntryList[2].getColumnValue().getColumnValueType() == ColValueType.DOUBLE)
          if (whereEntryList[2].getColumnValue().getDoubleColumnValue() != 44.5)
            return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() != SelectRowColumnType.ALL_COLUMNS)
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with WHERE, ORDER BY and LIMIT clauses was executed successfully";
      message.TestID = 55;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }

    /*
     * Test case for select query for selecting specific columns
     */
    private bool case56()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select col1, col2 from tablename where col1=47 and col2 = testcol and col3=44.5 order by col1 asc, col2 dsc limit 10 , 20;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
      {
        if (((SelectRows)statementObject).getLimitRange().getStartIndex() != 10)
          return false;
        if (((SelectRows)statementObject).getLimitRange().getCount() != 20)
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
      {
        List<OrderByEntry> orderByList = ((SelectRows)statementObject).getOrderByList().getSubOrderBylist().getOrderByEntryList();

        if (orderByList[0].getColumnName() != "col1")
          return false;
        if (orderByList[0].getOrderByType() != "ASC")
          return false;

        if (orderByList[1].getColumnName() != "col2")
          return false;
        if (orderByList[1].getOrderByType() != "DSC")
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
      {
        List<WhereEntry> whereEntryList = ((SelectRows)statementObject).getWhereList().getSubWhereList().getWhereEntryList();
        if (whereEntryList[0].getColumnName() != "col1")
          return false;
        if (whereEntryList[0].getColumnValue().getColumnValueType() == ColValueType.INTEGER)
          if (whereEntryList[0].getColumnValue().getIntColumnValue() != 47)
            return false;

        if (whereEntryList[1].getColumnName() != "col2")
          return false;
        if (whereEntryList[1].getColumnValue().getColumnValueType() == ColValueType.STRING)
          if (whereEntryList[1].getColumnValue().getStringColumnValue() != "testcol")
            return false;

        if (whereEntryList[2].getColumnName() != "col3")
          return false;
        if (whereEntryList[2].getColumnValue().getColumnValueType() == ColValueType.DOUBLE)
          if (whereEntryList[2].getColumnValue().getDoubleColumnValue() != 44.5)
            return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() == SelectRowColumnType.SPECIFIC_COLUMNS)
      {
        List<string> columnList = ((SelectRows)statementObject).getSelectRowTableColList().getTableColumnList().getList();
        if (columnList[0] != "col1")
          return false;
        if (columnList[1] != "col2")
          return false;
      }
      else
        return false;
      Message message = new Message();
      message.Msg = "SELECT query which selects specific columns was executed successfully";
      message.TestID = 56;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      
      return true;
    }


    /*
     * Test case for select query with certain count
     */
    private bool case57()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select count(col1) from tablename where col1=47 and col2 = testcol and col3=44.5 order by col1 asc, col2 dsc limit 10 , 20;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
      {
        if (((SelectRows)statementObject).getLimitRange().getStartIndex() != 10)
          return false;
        if (((SelectRows)statementObject).getLimitRange().getCount() != 20)
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
      {
        List<OrderByEntry> orderByList = ((SelectRows)statementObject).getOrderByList().getSubOrderBylist().getOrderByEntryList();

        if (orderByList[0].getColumnName() != "col1")
          return false;
        if (orderByList[0].getOrderByType() != "ASC")
          return false;

        if (orderByList[1].getColumnName() != "col2")
          return false;
        if (orderByList[1].getOrderByType() != "DSC")
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
      {
        List<WhereEntry> whereEntryList = ((SelectRows)statementObject).getWhereList().getSubWhereList().getWhereEntryList();
        if (whereEntryList[0].getColumnName() != "col1")
          return false;
        if (whereEntryList[0].getColumnValue().getColumnValueType() == ColValueType.INTEGER)
          if (whereEntryList[0].getColumnValue().getIntColumnValue() != 47)
            return false;

        if (whereEntryList[1].getColumnName() != "col2")
          return false;
        if (whereEntryList[1].getColumnValue().getColumnValueType() == ColValueType.STRING)
          if (whereEntryList[1].getColumnValue().getStringColumnValue() != "testcol")
            return false;

        if (whereEntryList[2].getColumnName() != "col3")
          return false;
        if (whereEntryList[2].getColumnValue().getColumnValueType() == ColValueType.DOUBLE)
          if (whereEntryList[2].getColumnValue().getDoubleColumnValue() != 44.5)
            return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() == SelectRowColumnType.COUNT_ROWS)
      {
        if (((SelectRows)statementObject).getSelectRowTableColList().getCountRows().getCountAllRowsFlag() == false)
        {
          if (((SelectRows)statementObject).getSelectRowTableColList().getCountRows().getColumnName() != "col1")
            return false;
        }
        else
          return false;
      }
      else
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with COUNT was executed successfully";
      message.TestID = 57;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }


    /*
     * Test case for select query with certain count
     */
    private bool case58()
    {
      QParser qParser = new QParser();
      Statement statementObject = qParser.validateQuery("select count(*) from tablename where col1=47 and col2 = testcol and col3=44.5 order by col1 asc, col2 dsc limit 10 , 20;");

      if (statementObject.getStatementType() != StatementType.SELECT_ROW)
        return false;

      if (((SelectRows)statementObject).getTableName() != "tablename")
        return false;

      if (((SelectRows)statementObject).getLimitRangeFlag() != false)
      {
        if (((SelectRows)statementObject).getLimitRange().getStartIndex() != 10)
          return false;
        if (((SelectRows)statementObject).getLimitRange().getCount() != 20)
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getOrderByFlag() != false)
      {
        List<OrderByEntry> orderByList = ((SelectRows)statementObject).getOrderByList().getSubOrderBylist().getOrderByEntryList();

        if (orderByList[0].getColumnName() != "col1")
          return false;
        if (orderByList[0].getOrderByType() != "ASC")
          return false;

        if (orderByList[1].getColumnName() != "col2")
          return false;
        if (orderByList[1].getOrderByType() != "DSC")
          return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getWhereListFlag() != false)
      {
        List<WhereEntry> whereEntryList = ((SelectRows)statementObject).getWhereList().getSubWhereList().getWhereEntryList();
        if (whereEntryList[0].getColumnName() != "col1")
          return false;
        if (whereEntryList[0].getColumnValue().getColumnValueType() == ColValueType.INTEGER)
          if (whereEntryList[0].getColumnValue().getIntColumnValue() != 47)
            return false;
        if (whereEntryList[1].getColumnName() != "col2")
          return false;
        if (whereEntryList[1].getColumnValue().getColumnValueType() == ColValueType.STRING)
          if (whereEntryList[1].getColumnValue().getStringColumnValue() != "testcol")
            return false;

        if (whereEntryList[2].getColumnName() != "col3")
          return false;
        if (whereEntryList[2].getColumnValue().getColumnValueType() == ColValueType.DOUBLE)
          if (whereEntryList[2].getColumnValue().getDoubleColumnValue() != 44.5)
            return false;
      }
      else
        return false;

      if (((SelectRows)statementObject).getSelectRowTableColList().getSelectRowColumnType() == SelectRowColumnType.COUNT_ROWS)
      {
        if (((SelectRows)statementObject).getSelectRowTableColList().getCountRows().getCountAllRowsFlag() != true)
          return false;
      }
      else
        return false;
      Message message = new Message();
      message.Msg = "SELECT query with COUNT was executed successfully";
      message.TestID = 58;
      message.Passed = true;
      string m_Message = message.ToString();
      m_MessageList.Add(m_Message);
      return true;
    }


    private bool case59()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("RENAME TABLE tab1 TO tab2;");
        RenameTable obj = (RenameTable)statementObject;
        if(obj.getStatementType() != StatementType.RENAME_TABLE)
        return false;
        if (obj.getOldTableName() != "tab1")
          return false;
        if (obj.getNewTableName() != "tab2")
          return false;
        Message message = new Message();
        message.Msg = "RENAME TABLE Query was executed succesfully";
        message.TestID = 59;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }

    }

    private bool case60()
    {
      QParser qParser = new QParser();
      try
      {
        Statement statementObject = qParser.validateQuery("RENAME COLUMN col1 TO col2 IN TABLE tab1;");
        RenameColumn obj = (RenameColumn)statementObject;
        if (obj.getStatementType() != StatementType.RENAME_COLUMN)
          return false;
        if (obj.getTableName() != "tab1")
          return false;
        if (obj.getOldColumnName() != "col1")
          return false;
        if(obj.getNewColumnName() != "col2")
        return false;
        Message message = new Message();
        message.Msg = "RENAME COLUMN Query was executed succesfully";
        message.TestID = 60;
        message.Passed = true;
        string m_Message = message.ToString();
        m_MessageList.Add(m_Message);
        return true;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return false;
      }

    }
  }
}
